1.IN JENKINS I WANA RUN DOCKER BUILD,PUSH,RUN.

pipeline{
    agent any
    stages{
        stage('Checkout The Code'){
            steps{
                git branch:'master', credentialsId:'git-ManjuKempaiah', url:'https://github.com/ManjuKempaiah/python-app'
            }
        }
        stage('Docker Build'){
            steps{
                sh 'docker build -t manjukempaiah/pyapp:0.0.1 .'
            }
        }
        stage('Docker Hub Push'){
            steps{
               withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'pwd', usernameVariable: 'user')]) {
             sh "docker login -u ${user} -p ${pwd}"
             sh "docker push manjukempaiah/pyapp:0.0.1"
             } 
            }
        }
        stage('Dcoker Dev Deploy'){
            steps{
                sshagent(['docker-ssh']) {
              sh "ssh -o StrictHostKeyChecking=no ec2-user@172.31.34.174 docker rm -f pyapp"
              sh "ssh ec2-user@172.31.34.174 docker run -d -p 8080:5000 --name pyapp manjukempaiah/pyapp:0.0.1"
             }
            }
        }
    }
}

1a.Docker

pipeline{
    agent any
    environment{
        DOCKER_TAG = "0.0.2"
    }
    stages{
        stage('Checkout The Code'){
            steps{
                git branch:'master', credentialsId:'git-ManjuKempaiah', url:'https://github.com/ManjuKempaiah/python-app'
            }
        }
        stage('Docker Build'){
            steps{
                sh 'docker build -t manjukempaiah/pyapp:${DOCKER_TAG} .'
            }
        }
        stage('Docker Hub Push'){
            steps{
               withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'pwd', usernameVariable: 'user')]) {
             sh "docker login -u ${user} -p ${pwd}"
             sh "docker push manjukempaiah/pyapp:${DOCKER_TAG}"
             } 
            }
        }
        stage('Dcoker Dev Deploy'){
            steps{
                sshagent(['docker-ssh']) {
              sh "ssh -o StrictHostKeyChecking=no ec2-user@172.31.34.174 docker rm -f pyapp"
              sh "ssh ec2-user@172.31.34.174 docker run -d -p 8080:5000 --name pyapp manjukempaiah/pyapp:${DOCKER_TAG}"
             }
            }
        }
    }
}

2.SONARQUBE

pipeline{
    agent any
    stages{
        stage("SCM"){
            steps{
                git branch:'main', credentialsId:'git-ManjuKempaiah', url:'https://github.com/ManjuKempaiah/chatboy'
            }
        }
        stage("Maven and sonar"){
            parallel{
                stage("Maven Package"){
                    steps{
                        sh 'mvn clean package'
                    }
                }
                stage("Sonar Analysis"){
                    steps{
                        withSonarQubeEnv('sonar10'){
                            sh 'mvn sonar:sonar'
                        }
                    }
                }
            }
        }
        stage("Sonar Status"){
            steps{
                script{
                    def qg = waitForQualityGate()
                    if (qg.status != 'OK'){
                        error "Sonar Analysis failed..."
                    }
                }
            }
        }
    }
}

2. SonarQube 

pipeline{
	agent any
	environment{
	GIT_BRANCH = "main"
	GIT_CREDS = "git-ManjuKempaiah"
	GIT_URL = "https://github.com/ManjuKempaiah/chatbot"
	}
	stages{
	stage('Checkout The Code'){
	steps{
	git branch: GIT_BRANCH, credentialsId: GIT_CREDS, url: GIT_URL
	}
	}
	stage('Maven Build'){
	steps{
	sh 'mvn clean package'
	}
	}
	stage('SonarQube Analysis'){
	steps{
	withSonarQubeEnv('sonar10'){
	sh 'mvn sonar:sonar'
	}
	}
	}
	stage('SonarQube Analysis Status'){
	steps{
	script{
	def qg = waitForQualityGate()
	if (qg.status != 'OK'){
	error "Sonar Analysis Failed"
	}
	}
	}
	}
	}
}

3.SHARED LIBRARY HELLO WORLD

@Library('jhc-libs23') _

pipeline{
    agent any
    stages{
        stage("Hello"){
            steps{
                greet("Manju")
                greet('Manju Amreen')
            }
        }
    }
}

4.PARALLEL STAGES

pipeline {
    agent any

    stages {
        stage('Task1 and Task2') {
           parallel{
               stage("Task1"){
                   steps{
                       echo "task1...."
                   }
               }
                stage("Task2"){
                   steps{
                       echo "task2...."
                   }
               }
           }
        }
    }
}

5.CICD PIPELINE WITH SHARED LIBRARY

@Library('jhc-libs23') _

pipeline{
    agent any
    stages{
        stage("git checkout"){
            steps{
                git branch:'develop',credentialsId:'git-ManjuKempaiah',url:'https://github.com/ManjuKempaiah/chatkerala'
            }
        }
        stage("Maven Build"){
            steps{
                sh 'mvn clean package'
            }
        }
        stage("Tomcat Deploy"){
            steps{
                tomcatDeploy('172.31.47.249','tomcat-dev','chatkerala.war')
            }
        }
    }
}

6.JENKINS PARAMETERS

pipeline {
    agent any
   parameters {
  choice choices: ['dev', 'test', 'stage', 'prod'], description: 'choose the environment to deploy', name: 'environment'
}
    stages {
        stage('Git Checkout') {
            when{
                expression{
                    params.environment == "dev"
                }
            }
            steps {
     git branch: 'main', credentialsId: 'git-ManjuKempaiah', url: 'https://github.com/ManjuKempaiah/chatcat'
            }
        }
        stage('Maven Build') {
            when{
                expression{
                    params.environment == "dev"
                }
            }
            steps {
     sh 'mvn clean package '
            }
        }
        stage('Dev Deploy') {
            when{
                expression{
                    params.environment == "dev"
                }
            }
            steps {
     echo 'deploy to development'
            }
        }
         stage('Test Deploy') {
             when{
                expression{
                    params.environment == "test"
                }
            }
            steps {
     echo 'deploy to test'
            }
        }
        stage('stage Deploy') {
            when{
                expression{
                    params.environment == "stage"
                }
            }
            steps {
     echo 'stage to test'
            }
        }
        stage('prod Deploy') {
            when{
                expression{
                    params.environment == "prod"
                }
            }
            steps {
     echo 'deploy to prod'
            }
        }
    }
}

7.MULTIBRANCHING PIPELINE

pipeline{
  agent any
  stages{
    stage("Maven Build"){
      steps{
        echo "This is Jenkinsfile demo"
      }
    }
    stage("Dev Deploy"){
      when{
        branch"develop"
      }
      steps{
        echo "deploying to dev"
      }
    }
    stage("Test Deploy"){
      when{
        branch"test"
      }
      steps{
        echo "deploying to test"
      }
    }
    stage("Prod Deploy"){
      when{
        branch"main"
      }
      steps{
        echo "deploying to prod"
      }
    }
  }
}

8.SHARED LIB GREET.GROOVY

def call(name){
  echo "Hi ${name}, Welcome"
}

9.SHARED LIB TOMCATDEPLOY.GROOVY

def call(ip,creds,warFile){
// install ssh agent plugin
            sshagent([creds]){
                // copy war file to tomcat-dev
                sh "scp -o StrictHostKeyChecking=no target/${warFile} ec2-user@${ip}:/opt/tomcat9/webapps"
                // restart tomcat
                sh "ssh ec2-user@${ip} /opt/tomcat9/bin/shutdown.sh"
                sh "ssh ec2-user@${ip} /opt/tomcat9/bin/startup.sh"
            }
}

10.CICD PIPELINE

pipeline{
    agent any
    stages{
        stage("Git Checkout"){
            steps{
                git branch:'main',credentialsId:'git-ManjuKempaiah',url:'https://github.com/ManjuKempaiah/chattakkar'
            }
        }
        stage("Maven Build"){
            steps{
                sh 'mvn clean package'
            }
        }
        stage("Tomact Delpoy"){
            steps{
                //install sshagent
                sshagent(['tomcat-dev']){
                    // copy warfile to tomcat-dev
                    sh "scp target/chattakkar.war ec2-user@172.31.47.249:/opt/tomcat9/webapps"
                    // restart tomcat
                    sh "ssh ec2-user@172.31.47.249 /opt/tomcat9/bin/shutdown.sh"
                    sh "ssh ec2-user@172.31.47.249 /opt/tomcat9/bin/startup.sh"
                }
            }
        }
    }
}



12.How to trigger job B using pipeline		

pipeline{
    agent any
    stages{
        stage("Hello"){
            steps{
                echo "ManjuAmreen"
            }
        }
        stage("Trigger Build"){
            steps{
                build('CICD-pipeline18')
            }
        }
    }
}

13. Jenkins Slave

pipeline{
    agent{
        label 'slave1'
    }
    stages{
        stage('Task1 and Task2'){
            parallel{
                stage('Task1'){
                    steps{
                        echo "Task1...."
                    }
                }
                stage('Task2'){
                    steps{
                        echo "Task2...."
                    }
                }
            }
        }
    }
}


14. Nexus Upload

pipeline{
    agent any
    stages{
        stage("Git Checkout"){
            steps{
                git branch:'main',credentialsId:'git-ManjuKempaiah',url:'https://github.com/ManjuKempaiah/chatleo'
            }
        }
         stage("Maven Build"){
            steps{
                sh "mvn clean package"
            }
        }
         stage("Nexus Push"){
            steps{
               script{
                def pom = readMavenPom file: 'pom.xml'
                def version = pom.version
                def repoName = version.endsWith("SNAPSHOT") ? "manju-snapshot" : "manju-release"
                nexusArtifactUploader artifacts: [[artifactId: '1.0', classifier: '', file: 'target/chatleo.war', type: 'war']], credentialsId: 'nexus3', 
                groupId: 'in.javahome', 
                nexusUrl: '172.31.17.73:8081', 
                nexusVersion: 'nexus3', 
                protocol: 'http', 
                repository: "${repoName}", 
                version: "${version}"
               }
            }
        }
    }
}


14.Nexus Release Version and Snapshot Version

pipeline{
    agent any
    stages{
        stage('Checkout The Code'){
            steps{
                git branch:'main', credentialsId:'git-ManjuKempaiah', url:'https://github.com/ManjuKempaiah/chatram'
            }
        }
        stage('Maven Build'){
            steps{
              sh 'mvn clean package'  
            }
        }
        stage('Nexus Artifact Upload'){
            steps{
              nexusArtifactUploader artifacts: [[artifactId: 'chatram', classifier: '', file: 'target/chatram.war', type: 'war']], credentialsId: 'nexus3', groupId: 'in.javahome', nexusUrl: '16.16.184.210:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'manju-release', version: '1.0' 
            }
        }
    }
}

----------------------------------------------------------------------------------------

pipeline{
    agent any
    stages{
        stage('Checkout The Code'){
            steps{
                git branch:'main', credentialsId:'git-ManjuKempaiah', url:'https://github.com/ManjuKempaiah/chatram'
            }
        }
        stage('Maven Build'){
            steps{
              sh 'mvn clean package'  
            }
        }
        stage('Nexus Artifact Upload'){
            steps{
              nexusArtifactUploader artifacts: [[artifactId: 'chatram', classifier: '', file: 'target/chatram.war', type: 'war']], credentialsId: 'nexus3', groupId: 'in.javahome', nexusUrl: '16.16.184.210:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'manju-snapshot', version: '1.0-SNAPSHOT' 
            }
        }
    }
}

----------------------------------------------------------------------------------------	

15. Agent Block

pipeline {
    agent none

    stages {
        stage('Build on Agent1') {
            agent {
                label 'agent1'
            }
            steps {
                // Build steps for Agent1
            }
        }

        stage('Build on Agent2') {
            agent {
                label 'agent2'
            }
            steps {
                // Build steps for Agent2
            }
        }
    }
}

16. Node block

pipeline {
    agent none

    stages {
        stage('Build on Agent1') {
            steps {
                node('agent1') {
                    // Build steps for Agent1
                }
            }
        }

        stage('Build on Agent2') {
            steps {
                node('agent2') {
                    // Build steps for Agent2
                }
            }
        }
    }
}

17. Using the archiveArtifacts Step

pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                // Your build steps here
                
                // Archive artifacts
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }
        
        stage('Test') {
            steps {
                // Your test steps here
            }
        }
        
        stage('Deploy') {
            steps {
                // Your deployment steps here
                
                // Retrieve artifacts from the latest successful build
                copyArtifacts(projectName: 'your-job-name', selector: lastSuccessful())
            }
        }
    }
}

18. Environment Variables

pipeline{
    agent any
    environment{
        GIT_BRANCH = "main"
        GIT_URL  = "https://github.com/ManjuKempaiah/docker-repo"
        GIT_CREDS = "git-manjukempaiah"
    }
    stages{
        stage('Checkout the Code'){
      steps{
           git branch: GIT_BRANCH, credentialsId: GIT_CREDS, url: GIT_URL
      }    
        
    }
}
}


19. To install Nginx

pipeline {
    agent any
    
    stages {
        stage('Install Nginx') {
            steps {
                script {
                    // Update package repository
                    sh 'sudo yum -y update'
                    
                    // Install Nginx
                    sh 'sudo yum -y install nginx'
                    
                    // Start Nginx service
                    sh 'sudo systemctl start nginx'
                    
                    // Enable Nginx to start on boot
                    sh 'sudo systemctl enable nginx'
                }
            }
        }
    }
}

20. To Install Node.js

pipeline {
    agent any
    
    environment {
        NODE_VERSION = '14.x'
    }
    
    stages {
        stage('Install Node.js') {
            steps {
                script {
                    // Install Node.js using NodeSource repository
                    sh 'curl -sL https://rpm.nodesource.com/setup_${NODE_VERSION} | sudo bash -'
                    sh 'sudo yum -y install nodejs'
                }
            }
        }
    }
}

21. To Install Docker

pipeline{
	agent any
	stages{
	stage('Install Docker'){
	steps{
	script{
	// Install docker
	sh 'sudo yum install docker -y'
	// Start docker
	sh 'sudo systemctl start docker'
	// Grant ec2-user permissions on docker
	sh 'usermod -a -G docker ec2-user'
	}
	}
	}
	}
}

22. To Install Ansible

pipeline{
	agent any
	stages{
	stage('Install Ansible'){
	steps{
	script{
	// Install EPEL repository          EPEL is needed to access the Ansible package on Amazon Linux
	sh 'sudo yum install epel-release'  Extra Packages for Enterprise Linux 
	// Install Ansible
	sh 'sudo yum instll ansible -y'
	}
	}
	}
	}
}

23. To Install Maven

pipeline {
    agent any
    
    stages {
        stage('Install Maven') {
            steps {
                script {
                    // Install Maven
                    sh 'sudo yum -y install maven'
                }
            }
        }
    }
}

24. To Install Git

pipeline {
    agent any
    
    stages {
        stage('Install Git') {
            steps {
                script {
                    // Install Git
                    sh 'sudo yum -y install git'
                }
            }
        }
    }
}

25. To Install Tomcat

pipeline {
    agent any
    
    stages {
        stage('Install Tomcat') {
            steps {
                script {
                    // Install Java
                    sh 'sudo yum -y install java-1.8.0-openjdk'
                    
                    // Download and extract Tomcat
                    sh 'wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.53/bin/apache-tomcat-9.0.53.tar.gz'
                    sh 'tar -xvf apache-tomcat-9.0.53.tar.gz'
                    
                    // Move Tomcat to /opt directory
                    sh 'sudo mv apache-tomcat-9.0.53 /opt/tomcat'
                    
                    // Set permissions
                    sh 'sudo chmod -R 755 /opt/tomcat'
                    
                    // Start Tomcat
                    sh 'sudo /opt/tomcat/bin/startup.sh'
                }
            }
        }
    }
}

26. Upstream

pipeline {
    agent any
    triggers {
      upstream 'ai-app-ci-cd'
    }

    stages {
        stage('Selenium Testing') {
            steps {
                echo 'Hello Selenium testing'
            }
        }
    }
}


	

